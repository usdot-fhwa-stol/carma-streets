/**
 * Intersection Model API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILanelet_info.h
 *
 * The information of lanelet
 */

#ifndef OAILanelet_info_H
#define OAILanelet_info_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILanelet_info : public OAIObject {
public:
    OAILanelet_info();
    OAILanelet_info(QString json);
    ~OAILanelet_info() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getSpeedLimit() const;
    void setSpeedLimit(const double &speed_limit);
    bool is_speed_limit_Set() const;
    bool is_speed_limit_Valid() const;

    QList<qint32> getConflictLaneletIds() const;
    void setConflictLaneletIds(const QList<qint32> &conflict_lanelet_ids);
    bool is_conflict_lanelet_ids_Set() const;
    bool is_conflict_lanelet_ids_Valid() const;

    double getLength() const;
    void setLength(const double &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    QString getTurnDirection() const;
    void setTurnDirection(const QString &turn_direction);
    bool is_turn_direction_Set() const;
    bool is_turn_direction_Valid() const;

    qint32 getSignalGroupId() const;
    void setSignalGroupId(const qint32 &signal_group_id);
    bool is_signal_group_id_Set() const;
    bool is_signal_group_id_Valid() const;

    QList<qint32> getConnectingLaneletIds() const;
    void setConnectingLaneletIds(const QList<qint32> &connecting_lanelet_ids);
    bool is_connecting_lanelet_ids_Set() const;
    bool is_connecting_lanelet_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 id;
    bool m_id_isSet;
    bool m_id_isValid;

    double speed_limit;
    bool m_speed_limit_isSet;
    bool m_speed_limit_isValid;

    QList<qint32> conflict_lanelet_ids;
    bool m_conflict_lanelet_ids_isSet;
    bool m_conflict_lanelet_ids_isValid;

    double length;
    bool m_length_isSet;
    bool m_length_isValid;

    QString turn_direction;
    bool m_turn_direction_isSet;
    bool m_turn_direction_isValid;

    qint32 signal_group_id;
    bool m_signal_group_id_isSet;
    bool m_signal_group_id_isValid;

    QList<qint32> connecting_lanelet_ids;
    bool m_connecting_lanelet_ids_isSet;
    bool m_connecting_lanelet_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILanelet_info)

#endif // OAILanelet_info_H
