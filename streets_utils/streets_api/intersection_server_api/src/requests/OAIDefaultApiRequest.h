/**
 * Intersection Model API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApiRequest_H
#define OAI_OAIDefaultApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIIntersection_info.h"
#include "OAILanelet_info.h"
#include <QString>
#include "OAIDefaultApiHandler.h"

namespace OpenAPI {

class OAIDefaultApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIDefaultApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIDefaultApiHandler> handler);
    virtual ~OAIDefaultApiRequest();

    void getConflictLaneletsRequest(const QString& link_lanelet_id);
    void getIntersectionInfoRequest();
    void listDepartureLaneletsRequest();
    void listEntryLaneletsRequest();
    void listLinkLaneletsRequest();
    

    void getConflictLaneletsResponse(const QList<OAILanelet_info>& res);
    void getIntersectionInfoResponse(const OAIIntersection_info& res);
    void listDepartureLaneletsResponse(const QList<OAILanelet_info>& res);
    void listEntryLaneletsResponse(const QList<OAILanelet_info>& res);
    void listLinkLaneletsResponse(const QList<OAILanelet_info>& res);
    

    void getConflictLaneletsError(const QList<OAILanelet_info>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getIntersectionInfoError(const OAIIntersection_info& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listDepartureLaneletsError(const QList<OAILanelet_info>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listEntryLaneletsError(const QList<OAILanelet_info>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void listLinkLaneletsError(const QList<OAILanelet_info>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void getConflictLanelets(qint32 link_lanelet_id);
    void getIntersectionInfo();
    void listDepartureLanelets();
    void listEntryLanelets();
    void listLinkLanelets();
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIDefaultApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIDefaultApiRequest_H
