/**
 * Intersection Model API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIDefaultApiHandler.h"
#include "OAIDefaultApiRequest.h"

namespace OpenAPI {

OAIDefaultApiHandler::OAIDefaultApiHandler(){

}

OAIDefaultApiHandler::~OAIDefaultApiHandler(){

}

void OAIDefaultApiHandler::getConflictLanelets(qint32 link_lanelet_id) {
    Q_UNUSED(link_lanelet_id);
    auto reqObj = qobject_cast<OAIDefaultApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QList<OAILanelet_info> res;
        reqObj->getConflictLaneletsResponse(res);
    }
}
void OAIDefaultApiHandler::getIntersectionInfo() {
    auto reqObj = qobject_cast<OAIDefaultApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAIIntersection_info res;
        reqObj->getIntersectionInfoResponse(res);
    }
}
void OAIDefaultApiHandler::listDepartureLanelets() {
    auto reqObj = qobject_cast<OAIDefaultApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QList<OAILanelet_info> res;
        reqObj->listDepartureLaneletsResponse(res);
    }
}
void OAIDefaultApiHandler::listEntryLanelets() {
    auto reqObj = qobject_cast<OAIDefaultApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QList<OAILanelet_info> res;
        reqObj->listEntryLaneletsResponse(res);
    }
}
void OAIDefaultApiHandler::listLinkLanelets() {
    auto reqObj = qobject_cast<OAIDefaultApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QList<OAILanelet_info> res;
        reqObj->listLinkLaneletsResponse(res);
    }
}


}
