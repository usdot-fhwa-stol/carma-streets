/**
 * Intersection Model API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntersection_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntersection_info::OAIIntersection_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntersection_info::OAIIntersection_info() {
    this->initializeModel();
}

OAIIntersection_info::~OAIIntersection_info() {}

void OAIIntersection_info::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_entry_lanelets_isSet = false;
    m_entry_lanelets_isValid = false;

    m_link_lanelets_isSet = false;
    m_link_lanelets_isValid = false;

    m_departure_lanelets_isSet = false;
    m_departure_lanelets_isValid = false;
}

void OAIIntersection_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntersection_info::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_entry_lanelets_isValid = ::OpenAPI::fromJsonValue(entry_lanelets, json[QString("entry_lanelets")]);
    m_entry_lanelets_isSet = !json[QString("entry_lanelets")].isNull() && m_entry_lanelets_isValid;

    m_link_lanelets_isValid = ::OpenAPI::fromJsonValue(link_lanelets, json[QString("link_lanelets")]);
    m_link_lanelets_isSet = !json[QString("link_lanelets")].isNull() && m_link_lanelets_isValid;

    m_departure_lanelets_isValid = ::OpenAPI::fromJsonValue(departure_lanelets, json[QString("departure_lanelets")]);
    m_departure_lanelets_isSet = !json[QString("departure_lanelets")].isNull() && m_departure_lanelets_isValid;
}

QString OAIIntersection_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntersection_info::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (entry_lanelets.size() > 0) {
        obj.insert(QString("entry_lanelets"), ::OpenAPI::toJsonValue(entry_lanelets));
    }
    if (link_lanelets.size() > 0) {
        obj.insert(QString("link_lanelets"), ::OpenAPI::toJsonValue(link_lanelets));
    }
    if (departure_lanelets.size() > 0) {
        obj.insert(QString("departure_lanelets"), ::OpenAPI::toJsonValue(departure_lanelets));
    }
    return obj;
}

qint32 OAIIntersection_info::getId() const {
    return id;
}
void OAIIntersection_info::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIIntersection_info::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIntersection_info::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIntersection_info::getName() const {
    return name;
}
void OAIIntersection_info::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIIntersection_info::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIntersection_info::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAILanelet_info> OAIIntersection_info::getEntryLanelets() const {
    return entry_lanelets;
}
void OAIIntersection_info::setEntryLanelets(const QList<OAILanelet_info> &entry_lanelets) {
    this->entry_lanelets = entry_lanelets;
    this->m_entry_lanelets_isSet = true;
}

bool OAIIntersection_info::is_entry_lanelets_Set() const{
    return m_entry_lanelets_isSet;
}

bool OAIIntersection_info::is_entry_lanelets_Valid() const{
    return m_entry_lanelets_isValid;
}

QList<OAILanelet_info> OAIIntersection_info::getLinkLanelets() const {
    return link_lanelets;
}
void OAIIntersection_info::setLinkLanelets(const QList<OAILanelet_info> &link_lanelets) {
    this->link_lanelets = link_lanelets;
    this->m_link_lanelets_isSet = true;
}

bool OAIIntersection_info::is_link_lanelets_Set() const{
    return m_link_lanelets_isSet;
}

bool OAIIntersection_info::is_link_lanelets_Valid() const{
    return m_link_lanelets_isValid;
}

QList<OAILanelet_info> OAIIntersection_info::getDepartureLanelets() const {
    return departure_lanelets;
}
void OAIIntersection_info::setDepartureLanelets(const QList<OAILanelet_info> &departure_lanelets) {
    this->departure_lanelets = departure_lanelets;
    this->m_departure_lanelets_isSet = true;
}

bool OAIIntersection_info::is_departure_lanelets_Set() const{
    return m_departure_lanelets_isSet;
}

bool OAIIntersection_info::is_departure_lanelets_Valid() const{
    return m_departure_lanelets_isValid;
}

bool OAIIntersection_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (entry_lanelets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (link_lanelets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (departure_lanelets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntersection_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
