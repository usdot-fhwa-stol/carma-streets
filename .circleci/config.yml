version: 2.1

#  Copyright (C) 2019-2022 LEIDOS.
# 
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy of
#  the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations under
#  the License.
# 

# Configuration file for Circle CI 
# CI will report failure if any executed command returns and error status
# Operations performed are as follows
# Build source code
# Run unit tests for C++ 
# Run static code analyzer for SourceCloud
# Upload test results
# Every run command should start with source ${INIT_ENV} to ensure all default dependencies are available
jobs:
  build:
    # Pull docker image 
    # XTERM used for better make output
    docker:
      - image: ubuntu:bionic-20190807
        environment:
          TERM: xterm
          INIT_ENV: /home/carma-streets/.base-image/init-env.sh
    resource_class: xlarge 
    # Set working directory
    working_directory: "/home/carma-streets"
    # Pull code and execute tests |
    # Name of each run command defines purpose use
    steps:
      #setup remote docker
      - setup_remote_docker :
          docker_layer_caching: false
      # Checkout PR branch
      - checkout
      - run: 
          name: Install Sonar & Dependencies
          command: |
            set -x
            apt-get update
            apt-get update  && apt-get install -y cmake git build-essential libboost1.65-all-dev curl unzip gcc-7 g++-7 autotools-dev automake qtbase5-dev qtbase5-dev-tools libqhttpengine-dev libssl-dev libpugixml-dev libgeographic-dev sqlite3 libsqlite3-dev
            apt-get install python3.5
            apt-get install -y gcovr
            
            cd /home/carma-streets/streets_utils/streets_api/intersection_client_api
            mkdir build
            cd /home/carma-streets/streets_utils/streets_api/intersection_client_api/build
            cmake .. && make
            make install

            mkdir -p /home/carma-streets/ext
            cd /home/carma-streets/ext
            git clone https://github.com/google/googletest/
            cd /home/carma-streets/ext/googletest/
            cmake .
            make
            make install
            
            cd /home/carma-streets/ext
            git clone https://github.com/edenhill/librdkafka
            cd /home/carma-streets/ext/librdkafka/
            ./configure --prefix=/usr
            make
            make install
            
            cd /home/carma-streets/ext
            git clone https://github.com/gabime/spdlog.git
            cd /home/carma-streets/ext/spdlog/
            mkdir build 
            cd /home/carma-streets/ext/spdlog/build
            cmake .. && make -j
            make install
            
            cd /home/carma-streets/ext
            git clone  https://github.com/Tencent/rapidjson
            cd /home/carma-streets/ext/rapidjson/
            mkdir build
            cd /home/carma-streets/ext/rapidjson/build
            cmake .. && make -j
            make install

            # Install qhttpengine
            cd /home/carma-streets/ext
            git clone https://github.com/etherealjoy/qhttpengine.git
            cd /home/carma-streets/ext/qhttpengine/
            mkdir build
            cd /home/carma-streets/ext/qhttpengine/build
            cmake .. && make -j
            make install

            # Install PROJ, a package for coordinate transformations
            git clone https://github.com/OSGeo/PROJ.git /home/carma-streets/PROJ --branch 6.2.1 && \
            cd /home/carma-streets/PROJ && \
            ./autogen.sh && \
            ./configure  && \
            make && \
            make install
            
            export DEBIAN_FRONTEND=noninteractive

            # Download a cmake module for PROJ
            cd /usr/share/cmake-3.10/Modules && curl -O https://raw.githubusercontent.com/mloskot/cmake-modules/master/modules/FindPROJ4.cmake
            apt update 
            apt install -y lsb-release
            sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
            curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -

            apt-get update && \
            apt-get install -y ros-melodic-catkin

            cd /opt/ros/melodic/
            ls -a
            

            cd /home/carma-streets/
            mkdir carma_lanelet2 && \
            cd carma_lanelet2 && \
            mkdir src && \
            cd src && \
            git init && \
            echo "temp" && \
            git remote add origin -f https://github.com/usdot-fhwa-stol/autoware.ai.git && \
            git config core.sparsecheckout true	&& \
            echo "common/hardcoded_params/*" >> .git/info/sparse-checkout && \
            echo "common/lanelet2_extension/*" >> .git/info/sparse-checkout && \
            echo "lanelet2/*" >> .git/info/sparse-checkout && \
            echo "mrt_cmake_modules/*" >> .git/info/sparse-checkout && \
            git pull --depth 1 origin refactor_lanelet2_extension && \
            git checkout refactor_lanelet2_extension && \
            rm -r lanelet2/lanelet2_python && \
            rm -r lanelet2/lanelet2_examples

            cd /home/carma-streets/carma_lanelet2
            source /opt/ros/melodic/setup.bash && \
            apt-get install -y python-rospkg && \
            apt-get install -y libeigen3-dev && \
            ROS_VERSION=1 LANELET2_EXTENSION_LOGGER_TYPE=1 catkin_make install

            cd /home/carma-streets/carma_lanelet2/install/
            ls -a
            
            cd /home/carma-streets
            mkdir .base-image
            SONAR_DIR=/opt/sonarqube
            mkdir $SONAR_DIR
            curl -o $SONAR_DIR/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
            curl -o $SONAR_DIR/build-wrapper.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
            curl -sL https://deb.nodesource.com/setup_10.x | bash -
            apt-get install -y nodejs
            mkdir /opt/jq
            curl -L "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" -o /opt/jq/jq
            chmod +x /opt/jq/jq
            cd $SONAR_DIR
            unzip $SONAR_DIR/sonar-scanner.zip -d .
            unzip $SONAR_DIR/build-wrapper.zip -d .
            rm $SONAR_DIR/sonar-scanner.zip
            rm $SONAR_DIR/build-wrapper.zip
            mv $(ls $SONAR_DIR | grep "sonar-scanner-") $SONAR_DIR/sonar-scanner/
            mv $(ls $SONAR_DIR | grep "build-wrapper-") $SONAR_DIR/build-wrapper/

            echo "export PATH=$PATH:/opt/jq/:$SONAR_DIR/sonar-scanner/bin/:$SONAR_DIR/build-wrapper/" > /home/carma-streets/.base-image/init-env.sh
            echo "source /opt/ros/melodic/setup.bash" >> /home/carma-streets/.base-image/init-env.sh
            echo "source /home/carma-streets/carma_lanelet2/install/setup.bash" >> /home/carma-streets/.base-image/init-env.sh
            cat /home/carma-streets/.base-image/init-env.sh
      - run:
          name: Build source code & Run Tests & Generate Gcovr Reports
          command: |
            source ${INIT_ENV}
            cd /home/carma-streets/
            build-wrapper-linux-x86-64 --out-dir /home/carma-streets/bw-output bash build.sh
            ./coverage.sh
      - store_test_results:
          path: test_results
      - run:
          name: Run Sonar Scanner
          command: |
            source ${INIT_ENV}
            if [ -z "${CIRCLE_PULL_REQUEST}" ]; then
              echo "Non-PR Build Detected. Running analysis on ${CIRCLE_BRANCH}"
              cd /home/carma-streets/
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN}
              exit 0;
            else
              echo "PR branch ${CIRCLE_BRANCH}"
              echo "Repo name ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
              echo "URL ${CIRCLE_PULL_REQUEST}"
              export PR_NUM=`echo ${CIRCLE_PULL_REQUEST} | cut -d'/' -f7`
              echo "PR number ${PR_NUM}"
              export BASE_BRANCH_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUM}"
              export TARGET_BRANCH=$(curl "$BASE_BRANCH_URL" | jq '.base.ref' | tr -d '"') 
              echo "Target Branch = ${TARGET_BRANCH}"
              cd /home/carma-streets/
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN} -Dsonar.pullrequest.base=${TARGET_BRANCH} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} -Dsonar.pullrequest.key=${PR_NUM}            
            fi 
