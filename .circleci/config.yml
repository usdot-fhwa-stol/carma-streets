version: 2

#  Copyright (C) 2019-2020 LEIDOS.
# 
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy of
#  the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations under
#  the License.
# 

# Configuration file for Circle CI 
# CI will report failure if any executed command returns and error status
# Operations performed are as follows
# Build source code
# Run unit tests for C++ 
# Run static code analyzer for SourceCloud
# Upload test results
# Every run command should start with source ${INIT_ENV} to ensure all default dependencies are available
jobs:
  build:
    # Pull docker image 
    # XTERM used for better make output
    docker:
      - image: usdotfhwastoldev/scheduling_service:ci_setup
        environment:
          TERM: xterm
          INIT_ENV: /home/carma-streets/.base-image/init-env.sh
    # Set working directory
    working_directory: "/home/carma-streets"
    # Pull code and execute tests |
    # Name of each run command defines purpose use
    steps:
      #setup remote docker
      - setup_remote_docker :
          docker_layer_caching: false
      # Checkout PR branch
      - run: 
         name: Clone Repo
         command: |
          rm -rf /home/carma-streets
          #git clone -b ${CIRCLE_BRANCH,,} https://github.com/usdot-fhwa-stol/carma-streets.git      
      - checkout:
      - run:
          name: Build scheduling_service
          command: |
            source ${INIT_ENV}
            cd /home/carma-streets/
            chmod 755 *
            build-wrapper-linux-x86-64 --out-dir /home/carma-streets/bw-output bash build.sh
      - run:
          name: Run Tests & Generate Gcovr Reports
          command: |
            source ${INIT_ENV}
            cd /home/carma-streets/
            #build-wrapper-linux-x86-64 --out-dir /home/carma-streets/bw-output bash build.sh
            ./coverage.sh
      - run:
          name: Run Sonar Scanner
          command: |
            source ${INIT_ENV}
            if [ -z "${CIRCLE_PULL_REQUEST}" ]; then
              echo "Non-PR Build Detected. Running analysis on ${CIRCLE_BRANCH}"
              cd /home/carma-streets/
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN}
              exit 0;
            else
              echo "PR branch ${CIRCLE_BRANCH}"
              echo "Repo name ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
              echo "URL ${CIRCLE_PULL_REQUEST}"
              export PR_NUM=`echo ${CIRCLE_PULL_REQUEST} | cut -d'/' -f7`
              echo "PR number ${PR_NUM}"
              export BASE_BRANCH_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUM}"
              export TARGET_BRANCH=$(curl "$BASE_BRANCH_URL" | jq '.base.ref' | tr -d '"') 
              echo "Target Branch = ${TARGET_BRANCH}"
              cd /home/carma-streets/
              sonar-scanner -X -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${SONAR_SCANNER_TOKEN} -Dsonar.pullrequest.base=${TARGET_BRANCH} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} -Dsonar.pullrequest.key=${PR_NUM}            
            fi       

  docker_build&push :
   machine:
    image: ubuntu-1604:202004-01
   steps:  
     - checkout
     - run: 
        name: Docker Build
        command: |
         docker build --network=host -t usdotfhwastoldev/scheduling_service:${CIRCLE_BRANCH,,} -f scheduling_service/Dockerfile .
    
     - run: 
        name: Docker Push
        # Push carma-streets docker image to usdotfhwastoldev dockerhub
        command: | 
         echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
         docker push usdotfhwastoldev/scheduling_service:${CIRCLE_BRANCH,,}
    
   
  docker_build&push_develop :
   machine:
    image: ubuntu-1604:202004-01
   steps:
     - checkout
     - run: 
        name: Docker Build
        command: |
          docker build --network=host -t usdotfhwastoldev/scheduling_service:${CIRCLE_BRANCH,,} -f scheduling_service/Dockerfile .
    
     - run: 
        name: Docker Push
        # Push carma-streets docker image to usdotfhwastoldev dockerhub
        command: | 
          echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          docker push usdotfhwastoldev/scheduling_service:${CIRCLE_BRANCH,,}
workflows:
  version: 2
  build:
    jobs:
      - docker_build&push_develop:
          filters:
            branches:
              only: develop
      - docker_build&push:
          filters:
           branches:
              ignore: develop
      - build
